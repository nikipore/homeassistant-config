{
    "common": {
        "label": {
            "positionConfig": "configuration",
            "infoText":"The configuration must be created and deployed for the settings page to work properly.",
            "binary": "binary",
            "json": "json",
            "jsonata": "json expr.",
            "timestamp":"timestamp",
            "suntimeObj": "{next suntime}",
            "blank": "\"\"",
            "nothing": "nothing",
            "checkall": "stopping after first match (if)",
            "stopfirst": "checking all rules",
            "nextOccurrence": "next occurrence",
            "on": "on",
            "validForDays": "valid days",
            "validForMonths": "valid months",
            "validForDates": "Gültigkeitsdauer (Jahr wird ignoriert)",
            "specialDays": "special days",
            "onlyEvenDays":"only even",
            "onlyOddDays":"only odd"
        },
        "types": {
            "unlimited":"no limitation",
            "undefined":"not used",
            "datespecific":"timestamp enhanced",
            "timeentered":"time (next)",
            "dateentered":"date",
            "timepredefined":"fixed times",
            "dayofmonth":"day of month",
            "dayofweek":"day of week",
            "timesun":"sun time",
            "timesunnow": "next sun time",
            "timemoon":"moon time",
            "randomNumber":"random number",
            "numPercent":"number in percent %",
            "suncalc":"sun calculation",
            "suninsky":"sun in the sky (percent)",
            "sunAzimuth":"Azimuth of sun",
            "sunElevation":"Elevation of sun",
            "sunAzimuthRad":"Azimuth of sun (rad)",
            "sunElevationRad":"Elevation of sun (rad)",
            "sunTimeByElevation":"time by elevation",
            "sunTimeByAzimuth":"time by azimuth",
            "sunTimeByElevationRad":"time by elevation (rad)",
            "sunTimeByAzimuthRad":"time by azimuth (rad)",
            "suntime":"sun time",
            "suntimes":"sun times",
            "mooncalc":"moon calculation",
            "moonPhase":"moon phase",
            "moonPhaseCheck": "moon phase",
            "levelfix":"Level",
            "levelfree": "Level entered",
            "levelND": "N/D - use default, sun control or reset",
            "PlTRes":"msg.payload if msg.topic contains",
            "isDST":"is DST (true/false)",
            "WeekOfYear":"week number",
            "isWeekOfYearEven":"is week even (true/false)",
            "DayOfYear":"day number",
            "isDayOfYearEven":"is day even (true/false)",
            "sunControlMode": "current sun control mode",
			"sunControlOff": "off",
			"sunControlRestrict": "restrict sunlight (🌞 Summer)",
			"sunControlMaximize": "maximize sunlight (⛄ Winter)"
        },
        "typeOptions": {
            "moonRise": "moon rise",
            "moonSet": "moon set",
            "astronomicalDawn": "astronomical dawn",
            "amateurDawn": "amateur dawn",
            "nauticalDawn": "nautical dawn",
            "blueHourDawnStart": "blue hour dawn start",
            "civilDawn": "civil dawn",
            "blueHourDawnEnd": "blue hour dawn end",
            "goldenHourDawnStart": "golden hour dawn start",
            "sunriseStart": "sunrise start",
            "sunriseEnd": "sunrise end",
            "goldenHourDawnEnd": "golden hour dawn end",
            "solarNoon": "solar noon",
            "goldenHourDuskStart": "golden hour dusk start",
            "sunsetStart": "sunset start",
            "sunsetEnd": "sunset end",
            "goldenHourDuskEnd": "golden hour dusk end",
            "blueHourDuskStart": "blue hour dusk start",
            "civilDusk": "civil dusk",
            "blueHourDuskEnd": "blue hour dusk end",
            "nauticalDusk": "nautical dusk",
            "amateurDusk": "amateur dusk",
            "astronomicalDusk": "astronomical dusk",
            "nadir": "nadir",
            "fMon": "first Monday",
            "fTue": "first Tuesday",
            "fWed": "first Wednesday",
            "fThu": "first Thursday",
            "fFri": "first Friday",
            "fSat": "first Saturday",
            "fSun": "first Sunday",
            "lMon": "last Monday",
            "lTue": "last Tuesday",
            "lWed": "last Wednesday",
            "lThu": "last Thursday",
            "lFri": "last Friday",
            "lSat": "last Saturday",
            "lSun": "last Sunday",
            "newMoon" : "New Moon 🌚",
            "waxingCrescentMoon": "Waxing Crescent 🌒",
            "firstQuarterMoon": "First Quarter 🌓",
            "waxingGibbousMoon": "Waxing Gibbous 🌔",
            "fullMoon": "Full Moon 🌝",
            "waningGibbousMoon": "Waning Gibbous 🌖",
            "lastQuarterMoon": "Last Quarter 🌗",
            "waningCrescentMoon": "Waning Crescent 🌘",
            "PlTRes":"msg.payload if msg.topic contains \"__topic__\""
        },
        "multiselectLbl": {
            "operatorTypes": "include into compare"
        },
        "operatorsGroups": [
            "Timestamp compare",
            "other"
        ],
        "operators": [
            "==     (equal)",
            "!=     (unequal)",
            ">      (greater)",
            ">=     (greater or equal)",
            "<      (lesser)",
            "<=     (lesser or equal)",
            "otherwise"
        ],
        "operatorTypesGroups": [
            "include into compare",
            "special"
        ],
        "operatorTypes": [
            "Milliseconds",
            "Seconds",
            "Minutes",
            "Hours",
            "Day of Month",
            "Month",
            "Year",
            "Day of Week"
        ],
        "outputFormatsGroups": [
            "Number",
            "Text (string)",
            "time (number) since emit",
            "day of week",
            "day of year",
            "week of year",
            "Text free"
        ],
        "outputFormats": [
            "UNIX timestamp (ms)",
            "YYYYMMDDHHMMSS",
            "YYYYMMDD.HHMMSS",
            "UTC date and time",
            "local date and time",
            "local time",
            "local date",
            "ISO date and time UTC",
            "ISO date and time local",
            "milliseconds",
            "seconds",
            "minutes",
            "hours",
            "Day Name, e.g. Monday, 22.12.",
            "Day in relative, e.g. Today, 22.12.",
            "Week number",
            "is week even",
            "day number",
            "is day even",
            "as object",
            "Other"
        ],
        "outputTSFormatsGroups": [
            "timestamp (number)",
            "timestamp rounded (number)",
            "Text"
        ],
        "outputTSFormats": [
            "milliseconds",
            "seconds",
            "minutes",
            "hours",
            "days",
            "weeks",
            "month",
            "years",
            "seconds rounded",
            "minutes rounded",
            "hours rounded",
            "days rounded",
            "weeks rounded",
            "month rounded",
            "years rounded",
            "Other (free defined)"
        ],
        "parseFormatsGroups": [
            "Number",
            "Text (string)",
            "Other"
        ],
        "parseFormats": [
            "milliseconds - UNIX timestamp",
            "ECMA-262 - JSON Date representation",
            "try different text Formats, prefer day first like d/M/y",
            "try different text Formats, prefer month first like M/d/y",
            "YYYYMMDDHHMMSS",
            "YYYYMMDD.HHMMSS",
            "try different various Formats (object, number, text)",
            "free text format definition"
        ],
        "multiplierGroups": [
            "Standard",
            "Special"
        ],
        "multiplier": [
            "milliseconds",
            "seconds",
            "minutes",
            "hours",
            "days",
            "weeks",
            "month",
            "year"
        ],
        "comparatorGroups": [
            "simple",
            "medium",
            "enhanced"
        ],
        "comparator": [
            "is true",
            "is false",
            "is null",
            "is not null",
            "is empty",
            "is not empty",
            "is true expr.",
            "is false expr.",
            "is not true expr.",
            "is not false expr.",
            "=",
            "≠",
            "<",
            "≤",
            ">",
            "≥",
            "contain",
            "containSome",
            "containEvery"
        ],
        "days": [
            "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday",
            "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
        ],
        "months": [
            "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December",
            "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
        ],
        "dayDiffNames": [
            "1 week ago",
            "6 days ago",
            "5 days ago",
            "4 days ago",
            "3 days ago",
            "2 days ago",
            "Yesterday",
            "Today",
            "Tomorrow",
            "day after tomorrow",
            "in 3 days",
            "in 4 days",
            "in 5 days",
            "in 6 days"
        ],
        "timeFormat": {
            "default": "ddd MMM dd yyyy HH:mm:ss",
            "shortDate": "m/d/yy",
            "mediumDate": "MMM d, yyyy",
            "longDate": "MMMM d, yyyy",
            "fullDate": "dddd, MMMM d, yyyy",
            "shortTime": "h:mm TT",
            "mediumTime": "h:mm:ss TT",
            "longTime": "h:mm:ss TT Z",
            "isoDate": "yyyy-MM-dd",
            "isoTime": "HH:mm:ss",
            "isoTimeZ": "HH:mm:ssooo",
            "isoDateTime": "yyyy-MM-dd'T'HH:mm:ssooo",
            "isoUtcDateTime": "UTC:yyyy-MM-dd'T'HH:mm:ss'Z'"
        },
        "comparatorDescription" : {
            "true": "is true",
            "false": "is false",
            "null": "is null",
            "nnull": "is not null",
            "empty": "is empty",
            "nempty": "is not empty",
            "true_expr": "is a true expression (true, on, 1)",
            "false_expr": "is a false expression (false, off, 0)",
            "ntrue_expr": "is not a true expression",
            "nfalse_expr": "is not a false expression",
            "equal": "equal",
            "nequal": "not equal",
            "lt": "less than",
            "lte": "less than or equal",
            "gt": "greater than",
            "gte": "greater than or equal",
            "contain": "contain",
            "containSome": "containSome",
            "containEvery": "containEvery"
        }
    },
    "ruleCtrl": {
        "reasons": {
			"overwriteNoExpire": "position is overwritten with importance __importance__",
			"overwriteExpire": "position is overwritten with importance __importance__, will expire __dateISO__",
			"default": "position is set to default position because no other rule matches",
			"ruleTime": "position by time - rule __timeOp__ __timeLocal__ [__number__] __name__",
			"ruleCond": "position by conditional rule __text__ [__number__] __name__",
			"ruleTimeCond": "position by time rule __timeOp__ __timeLocal__ and condition __text__ [__number__] __name__",
			"rule": "position by fixed rule [__number__] __name__",
			"sunMinAltitude": "sun below minimum altitude",
			"sunMinDelta": "change is less ad min delta",
			"sunNotInWin": "Sun not in window",
			"sunCtrl": "sun control",
			"sunCtrlMin": "__org__ (__level__ is below minimum)",
			"sunCtrlMax": "__org__ (__level__ is above maximum)",
			"oversteer": "sun position oversteers",
			"smooth": "Position is not changed to __pos__ because not enough time has passed since the last change (time smooth)",
			"sunInWinMax": "Sun in window (Level is maximum)",
			"sunNotInWinMin": "Sun not in window (Level is minimum)",
			"ruleMin": "__org__ (__level__ is below minimum) [__number__] __name__",
			"ruleMax": "__org__ (__level__ is above maximum) [__number__] __name__",
			"startDelay": "node in startup until __dateISO__"
        },
        "states": {
			"overwriteNoExpire": "overwritten [imp=__importance__]",
			"overwriteExpire": "overwritten [imp=__importance__], till __timeLocal__",
			"default": "default",
			"ruleTime": "__timeOp__ __timeLocal__ [__number__] __name__",
			"ruleCond": "__textShort__ [__number__] __name__",
			"ruleTimeCond": "__timeOp__ __timeLocal__ + cond __operatorText__ [__number__] __name__",
			"rule": "by fixed rule [__number__] __name__",
			"sunMinAltitude": "min altitude",
			"sunMinDelta": "min delta",
			"sunNotInWin": "no sun in window",
			"sunCtrl": "sun control",
			"sunCtrlMin": "__org__ (min)",
			"sunCtrlMax": "__org__ (max)",
			"oversteer": "oversteer",
			"smooth": "block change to __pos__",
			"sunInWinMax": "Sun in window (max)",
			"sunNotInWinMin": "Sun not in window (min)",
			"ruleMin": "__org__ [min rule __number__]",
			"ruleMax": "__org__ [max rule __number__]",
			"startDelay": "startup [__date__]"
		}
    },
    "errors": {
        "warning": "Warning: __message__",
        "error": "Error: __message__",
        "error-title": "internal error",
        "error-init": "error '__message__', retry in __time__min",
        "warn-init": "warning '__message__', retry in __time__min",
        "pos-config": "Node not properly configured!! Missing or wrong position configuration!",
        "pos-config-state": "Node not properly configured!!",
        "unknownPropertyOperator": "error, the used property operator __propertyOp__=\"__propertyOpText__\" is unknown!",
        "unknownCompareOperator": "error, the used compare operator \"__operator__\" is unknown! (\"__opTypeA__.__opValueA__\" compare to \"__opTypeB__.__opValueB__\")",
        "notEvaluableProperty":"Error: could not evaluate __type__.__value__!",
        "notEvaluablePropertyAdd":"Error \"__err__\", could not evaluate __type__.__value__",
        "notEvaluablePropertyUsedValue": "could not evaluate __type__.__value__, using \"__usedValue__\"!",
        "invalidParameter":"Parameter \"__param__\" is invalid \"__type__\" (using __newValue__)",
        "invalid-expr": "Invalid JSONata expression: __error__",
        "getPropertyData": "error getting condition data: \"__message__\" skipping time",
        "error-time": "Error get time: __message__"
    },
    "position-config": {
        "label": {
            "position": "Position",
            "latitude": "Latitude",
            "longitude": "Longitude",
            "angleType": "angle type",
            "timeZoneOffset": "TZ Offset",
            "name": "Name",
            "property": "Property",
            "minutes": "minutes",
            "stateDateFormat": "State Date Format",
            "stateTimeFormat": "State Time Format",
            "OSStandard": "Operating system standard",
            "timeZoneDST": "DST",
            "noDST": "No DST",
            "addDST1Hour": "DST add 1 Hour",
            "addDST2Hour": "DST add 2 Hours"
        },
        "placeholder": {
            "positionConfig":"select or create generic configuration",
            "latitude": "51.025",
            "longitude": "-1.4",
            "angleType": "deg",
            "timeZoneOffset": "0",
            "name": "Name",
            "stateDateFormat": "Format of the state output of a date only. If empty default toLocale​Date​String will be used.",
            "stateTimeFormat": "Format of the state output of a time only. If empty default toLocale​Time​String will be used."
        },
        "tips": {
            "config": "Starting from Version 2.0 the coordinates are not saved as credentials due to privacy reasons. So they no longer part of the regular flow and will not part of the export! To update from a previous version save and re-deploy is necessary.",
            "timeZoneOffset": "If for the timezone OS Standard is choosen the standard timezone including daylight saving switch is used. If is not chosen this setting, but a special time zone then no change of the daylightsaving is done! Formatchanges to time could taken time until it will get any effect."
        },
        "errors": {
            "latitude-missing": "Latitude is missing or wrong!",
            "longitude-missing": "Longitude is missing or wrong!",
            "coordinates-missing": "Latitude and Longitude is wrong!"
        }
    }
}